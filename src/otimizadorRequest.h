// Generated by gencpp from file nmpc_robo/otimizadorRequest.msg
// DO NOT EDIT!


#ifndef NMPC_ROBO_MESSAGE_OTIMIZADORREQUEST_H
#define NMPC_ROBO_MESSAGE_OTIMIZADORREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nmpc_robo
{
template <class ContainerAllocator>
struct otimizadorRequest_
{
  typedef otimizadorRequest_<ContainerAllocator> Type;

  otimizadorRequest_()
    : a(0.0)
    , b(0.0)
    , c(0.0)
    , d(0.0)
    , e(0.0)
    , f(0.0)
    , g(0.0)
    , h(0.0)  {
    }
  otimizadorRequest_(const ContainerAllocator& _alloc)
    : a(0.0)
    , b(0.0)
    , c(0.0)
    , d(0.0)
    , e(0.0)
    , f(0.0)
    , g(0.0)
    , h(0.0)  {
  (void)_alloc;
    }



   typedef double _a_type;
  _a_type a;

   typedef double _b_type;
  _b_type b;

   typedef double _c_type;
  _c_type c;

   typedef double _d_type;
  _d_type d;

   typedef double _e_type;
  _e_type e;

   typedef double _f_type;
  _f_type f;

   typedef double _g_type;
  _g_type g;

   typedef double _h_type;
  _h_type h;





  typedef boost::shared_ptr< ::nmpc_robo::otimizadorRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nmpc_robo::otimizadorRequest_<ContainerAllocator> const> ConstPtr;

}; // struct otimizadorRequest_

typedef ::nmpc_robo::otimizadorRequest_<std::allocator<void> > otimizadorRequest;

typedef boost::shared_ptr< ::nmpc_robo::otimizadorRequest > otimizadorRequestPtr;
typedef boost::shared_ptr< ::nmpc_robo::otimizadorRequest const> otimizadorRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nmpc_robo::otimizadorRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nmpc_robo::otimizadorRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nmpc_robo::otimizadorRequest_<ContainerAllocator1> & lhs, const ::nmpc_robo::otimizadorRequest_<ContainerAllocator2> & rhs)
{
  return lhs.a == rhs.a &&
    lhs.b == rhs.b &&
    lhs.c == rhs.c &&
    lhs.d == rhs.d &&
    lhs.e == rhs.e &&
    lhs.f == rhs.f &&
    lhs.g == rhs.g &&
    lhs.h == rhs.h;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nmpc_robo::otimizadorRequest_<ContainerAllocator1> & lhs, const ::nmpc_robo::otimizadorRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nmpc_robo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::nmpc_robo::otimizadorRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nmpc_robo::otimizadorRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nmpc_robo::otimizadorRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nmpc_robo::otimizadorRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nmpc_robo::otimizadorRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nmpc_robo::otimizadorRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nmpc_robo::otimizadorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e9d48d3aac2379fd83cf55ec74b28488";
  }

  static const char* value(const ::nmpc_robo::otimizadorRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe9d48d3aac2379fdULL;
  static const uint64_t static_value2 = 0x83cf55ec74b28488ULL;
};

template<class ContainerAllocator>
struct DataType< ::nmpc_robo::otimizadorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nmpc_robo/otimizadorRequest";
  }

  static const char* value(const ::nmpc_robo::otimizadorRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nmpc_robo::otimizadorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 a\n"
"float64 b\n"
"float64 c\n"
"float64 d\n"
"float64 e\n"
"float64 f\n"
"float64 g\n"
"float64 h\n"
;
  }

  static const char* value(const ::nmpc_robo::otimizadorRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nmpc_robo::otimizadorRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.a);
      stream.next(m.b);
      stream.next(m.c);
      stream.next(m.d);
      stream.next(m.e);
      stream.next(m.f);
      stream.next(m.g);
      stream.next(m.h);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct otimizadorRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nmpc_robo::otimizadorRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nmpc_robo::otimizadorRequest_<ContainerAllocator>& v)
  {
    s << indent << "a: ";
    Printer<double>::stream(s, indent + "  ", v.a);
    s << indent << "b: ";
    Printer<double>::stream(s, indent + "  ", v.b);
    s << indent << "c: ";
    Printer<double>::stream(s, indent + "  ", v.c);
    s << indent << "d: ";
    Printer<double>::stream(s, indent + "  ", v.d);
    s << indent << "e: ";
    Printer<double>::stream(s, indent + "  ", v.e);
    s << indent << "f: ";
    Printer<double>::stream(s, indent + "  ", v.f);
    s << indent << "g: ";
    Printer<double>::stream(s, indent + "  ", v.g);
    s << indent << "h: ";
    Printer<double>::stream(s, indent + "  ", v.h);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NMPC_ROBO_MESSAGE_OTIMIZADORREQUEST_H
