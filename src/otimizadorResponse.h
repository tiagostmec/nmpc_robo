// Generated by gencpp from file nmpc_robo/otimizadorResponse.msg
// DO NOT EDIT!


#ifndef NMPC_ROBO_MESSAGE_OTIMIZADORRESPONSE_H
#define NMPC_ROBO_MESSAGE_OTIMIZADORRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nmpc_robo
{
template <class ContainerAllocator>
struct otimizadorResponse_
{
  typedef otimizadorResponse_<ContainerAllocator> Type;

  otimizadorResponse_()
    : u(0.0)
    , v(0.0)  {
    }
  otimizadorResponse_(const ContainerAllocator& _alloc)
    : u(0.0)
    , v(0.0)  {
  (void)_alloc;
    }



   typedef double _u_type;
  _u_type u;

   typedef double _v_type;
  _v_type v;





  typedef boost::shared_ptr< ::nmpc_robo::otimizadorResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nmpc_robo::otimizadorResponse_<ContainerAllocator> const> ConstPtr;

}; // struct otimizadorResponse_

typedef ::nmpc_robo::otimizadorResponse_<std::allocator<void> > otimizadorResponse;

typedef boost::shared_ptr< ::nmpc_robo::otimizadorResponse > otimizadorResponsePtr;
typedef boost::shared_ptr< ::nmpc_robo::otimizadorResponse const> otimizadorResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nmpc_robo::otimizadorResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nmpc_robo::otimizadorResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::nmpc_robo::otimizadorResponse_<ContainerAllocator1> & lhs, const ::nmpc_robo::otimizadorResponse_<ContainerAllocator2> & rhs)
{
  return lhs.u == rhs.u &&
    lhs.v == rhs.v;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::nmpc_robo::otimizadorResponse_<ContainerAllocator1> & lhs, const ::nmpc_robo::otimizadorResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace nmpc_robo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::nmpc_robo::otimizadorResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nmpc_robo::otimizadorResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nmpc_robo::otimizadorResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nmpc_robo::otimizadorResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nmpc_robo::otimizadorResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nmpc_robo::otimizadorResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nmpc_robo::otimizadorResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8102e607f285d4bea0ed283964b8f47d";
  }

  static const char* value(const ::nmpc_robo::otimizadorResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8102e607f285d4beULL;
  static const uint64_t static_value2 = 0xa0ed283964b8f47dULL;
};

template<class ContainerAllocator>
struct DataType< ::nmpc_robo::otimizadorResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nmpc_robo/otimizadorResponse";
  }

  static const char* value(const ::nmpc_robo::otimizadorResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nmpc_robo::otimizadorResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 u\n"
"float64 v\n"
"\n"
;
  }

  static const char* value(const ::nmpc_robo::otimizadorResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nmpc_robo::otimizadorResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.u);
      stream.next(m.v);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct otimizadorResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nmpc_robo::otimizadorResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nmpc_robo::otimizadorResponse_<ContainerAllocator>& v)
  {
    s << indent << "u: ";
    Printer<double>::stream(s, indent + "  ", v.u);
    s << indent << "v: ";
    Printer<double>::stream(s, indent + "  ", v.v);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NMPC_ROBO_MESSAGE_OTIMIZADORRESPONSE_H
